server:
  port: 8080

spring:
  application:
    name: seoul-fit-backend

  config:
    import:
      - classpath:/scheduler/scheduler.yml

  datasource:
    driverClassName: org.h2.Driver
    url: 'jdbc:h2:mem:seoul_fit'
    username: hkjin
    password: 1234

  h2:
    console:
      enabled: true
      path: /h2-console # 접속: localhost:8080/h2-console

  # spring jpa
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: false
        show_sql: false
    defer-datasource-initialization: true
    open-in-view: false

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID:your-kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:your-kakao-client-secret}
            redirect-uri: ${KAKAO_REDIRECT_URI:http://localhost:8080/login/oauth2/code/kakao}
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image, account_email
            client-name: Kakao
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            redirect-uri: ${GOOGLE_REDIRECT_URI:http://localhost:8080/login/oauth2/code/google}
            scope: profile, email
          naver:
            client-id: ${NAVER_CLIENT_ID:your-naver-client-id}
            client-secret: ${NAVER_CLIENT_SECRET:your-naver-client-secret}
            redirect-uri: ${NAVER_REDIRECT_URI:http://localhost:8080/login/oauth2/code/naver}
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response


seoul-api:
  base-url: 'http://openapi.seoul.go.kr:8088/666e634468776c7339314668766844/json'
  v1:
    culture:
      service-name:
        - culturalEventInfo
        - ListPublicReservationCulture
        - culturalSpaceInfo
    environment:
      service-name:
        - RealtimeCityAir
    amenities:
      service-name:
        - TbGtnHwcwP

# UrbanPing 확장 설정 (오픈소스 기여자를 위한 설정)
urbanping:
  # 공공 API 설정
  api:
    seoul:
      base-url: http://openapi.seoul.go.kr:8088
      api-key: ${SEOUL_API_KEY:666e634468776c7339314668766844}
      timeout: 10
      retry-attempts: 3
  
  # 트리거 설정 (개발자가 쉽게 수정할 수 있도록 외부화)
  trigger:
    temperature:
      high-threshold: 35.0
      low-threshold: 0.0
    bike:
      shortage-threshold: 10
      full-threshold: 95
      location-radius: 2000
    air-quality:
      bad-levels: ["나쁨", "매우나쁨"]
    congestion:
      high-levels: ["붐빔", "매우붐빔"]
  
  # 스케줄러 설정
  scheduler:
    realtime-interval: 300000 # 5분 (밀리초)
    cultural-interval: 1800000 # 30분 (밀리초)
    enabled: true

logging:
  level:
    com.seoulfit.backend: DEBUG
    org.springframework.web.client: DEBUG
    # 트리거 시스템 로깅
    com.seoulfit.backend.trigger: INFO
    com.seoulfit.backend.scheduler: INFO
    com.seoulfit.backend.external: INFO

jwt:
  secret: ${JWT_SECRET:your-very-secure-secret-key-that-is-at-least-256-bits-long}
  access-token-validity-in-seconds: 1800  # 30분
  refresh-token-validity-in-seconds: 1209600  # 2주

# Actuator 설정 (시스템 모니터링용)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,scheduledtasks,beans
  endpoint:
    health:
      show-details: always
    scheduledtasks:
      enabled: true
