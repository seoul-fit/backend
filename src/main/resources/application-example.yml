# Seoul Fit Backend - 환경 설정 예제 파일
# 
# 이 파일을 복사하여 실제 환경에 맞게 수정하세요.
# 로컬 개발: application-local.yml
# 개발 환경: application-dev.yml  
# 운영 환경: application-prod.yml

server:
  port: 8080

spring:
  application:
    name: seoul-fit-backend

  config:
    import:
      - classpath:/scheduler/scheduler.yml

  # 데이터베이스 설정
  datasource:
    driverClassName: org.h2.Driver
    url: '${DATABASE_URL}'           # jdbc:h2:mem:seoul_fit (로컬) / jdbc:postgresql://... (운영)
    username: ${DATABASE_USERNAME}   # 데이터베이스 사용자명
    password: ${DATABASE_PASSWORD}   # 데이터베이스 비밀번호

  h2:
    console:
      enabled: ${H2_CONSOLE_ENABLED:false}  # 로컬에서만 true
      path: /h2-console

  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}  # 로컬: create, 운영: validate
    properties:
      hibernate:
        format_sql: ${JPA_FORMAT_SQL:false}
        show_sql: ${JPA_SHOW_SQL:false}
    defer-datasource-initialization: ${JPA_DEFER_INIT:false}
    open-in-view: false

  # OAuth 설정
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}        # 카카오 앱 키
            client-secret: ${KAKAO_CLIENT_SECRET} # 카카오 시크릿 키
            redirect-uri: ${KAKAO_REDIRECT_URI}   # 리다이렉트 URI
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image, account_email
            client-name: Kakao
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${GOOGLE_REDIRECT_URI}
            scope: profile, email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URI}
            authorization-grant-type: authorization_code
            scope: name, email, profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# 서울시 공공데이터 API 설정
seoul-api:
  base-url: 'http://openapi.seoul.go.kr:8088/${SEOUL_API_KEY}/json'
  v1:
    culture:
      service-name:
        - culturalEventInfo
        - ListPublicReservationCulture
        - culturalSpaceInfo
    environment:
      service-name:
        - RealtimeCityAir
      api-key: ${SEOUL_API_KEY}  # 서울시 공공데이터 API 키
      batch-size: 1000
      retention-days: 30
    amenities:
      service-name:
        - TbGtnHwcwP
    facilities:
      service-name:
        - SeoulPublicLibraryInfo
    park:
      service-name: SearchParkInfoService
      batch-size: 1000
      retention-days: 3
    sports:
      service-name: ListProgramByPublicSportsFacilitiesService
      batch-size: 1000
      retention-days: 3
    restaurant:
      service-name: TbVwRestaurants
      batch-size: 1000
      retention-days: 3

# Seoul Fit 확장 설정
seoulfit:
  api:
    seoul:
      base-url: http://openapi.seoul.go.kr:8088
      api-key: ${SEOUL_API_KEY}
      timeout: 10
      retry-attempts: 3
  
  geo:
    csv:
      path: ${GEO_CSV_PATH:classpath:geo/seoul_comprehensive_regions.csv}
  
  trigger:
    temperature:
      high-threshold: 35.0
      low-threshold: 0.0
    bike:
      shortage-threshold: 10
      full-threshold: 95
      location-radius: 2000
    air-quality:
      bad-levels: ["나쁨", "매우나쁨"]
    congestion:
      high-levels: ["붐빔", "매우붐빔"]
  
  scheduler:
    realtime-interval: 300000
    cultural-interval: 1800000
    env-realtime-interval: 300000
    env-daily-cron: "0 0 3 * * ?"
    env-weekly-cron: "0 0 2 * * SUN"
    enabled: ${SCHEDULER_ENABLED:true}
    culture:
      daily-cron:
        - "0 1 2 * * ?"
        - "0 2 2 * * ?"
        - "0 3 2 * * ?"
    facilities:
      daily-cron:
        - "0 30 2 * * ?"
        - "0 31 2 * * ?"
    park:
      daily-cron:
        - "0 0 3 * * ?"
    restaurant:
      daily-cron:
        - "0 0 4 * * ?"

# Google API 설정
google:
  api-key: ${GOOGLE_API_KEY}

# 로깅 설정
logging:
  level:
    com.seoulfit.backend: ${LOG_LEVEL:INFO}
    org.springframework.web.client: ${LOG_LEVEL:WARN}
    com.seoulfit.backend.trigger: INFO
    com.seoulfit.backend.scheduler: INFO
    com.seoulfit.backend.external: INFO
    com.seoulfit.backend.env: INFO
    com.seoulfit.backend.env.infrastructure.batch: INFO

# JWT 설정
jwt:
  secret: ${JWT_SECRET}                                    # 최소 256비트 비밀키
  access-token-validity-in-seconds: ${JWT_ACCESS_EXPIRY:1800}   # 30분
  refresh-token-validity-in-seconds: ${JWT_REFRESH_EXPIRY:1209600} # 2주

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: ${ACTUATOR_ENDPOINTS:health,info}
  endpoint:
    health:
      show-details: ${ACTUATOR_HEALTH_DETAILS:when-authorized}
    scheduledtasks:
      enabled: ${ACTUATOR_SCHEDULED_TASKS:false}